import pyttsx3 #pip install pyttsx3
import speech_recognition as sr #pip install speechRecognition
import datetime
import wikipedia #pip install wikipedia
import webbrowser
import os
import smtplib
from gtts import gTTS
import playsound
import calendar
import random


engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voices',voices[1].id)

def talk(audio):
    engine.say(audio)
    engine.runAndWait()
    
    
def wishMe():
    hour=datetime.datetime.now().hour
    if hour>=0 and hour<12:
        talk("Hello,Good Morning")
        print("Hello,Good Morning")
    elif hour>=12 and hour<18:
        talk("Hello,Good Afternoon")
        print("Hello,Good Afternoon")
    else:
        talk("Hello,Good Evening")
        print("Hello,Good Evening")
        
talk("Loading your AI personal assistant")
print('Loading your AI personal assistant')
wishMe()

    


def rec_audio():
    recog = sr.Recognizer()

    with sr.Microphone() as source:
         recog.adjust_for_ambient_noise(source=source)
         print("listening....")
         audio = recog.listen(source)

    data = ''


    try:
        data = recog.recognize_google(audio)
        print("You said : {}".format(data))

    except sr.UnknownValueError:
        print("Assistant could not understood audio")

    except sr.RequestError as ex:
        print("Request Error from Google Speech Recognition" + ex)

    return  data

rec_audio()


if __name__ == "__main__":
    wishMe()
    while True:
    # if 1:
        query = rec_audio().lower()

        # Logic for executing tasks based on query
        if 'wikipedia' in query:
            talk('Searching Wikipedia...')
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences=2)
            talk("According to Wikipedia")
            print(results)
            talk(results)

        elif 'open youtube' in query:
            webbrowser.open("youtube.com")

        elif 'open google' in query:
            webbrowser.open("google.com")

        elif 'open stackoverflow' in query:
            webbrowser.open("stackoverflow.com")   


        elif 'play music' in query:
            music_dir = ''
            songs = os.listdir(music_dir)
            print(songs)    
            os.startfile(os.path.join(music_dir, songs[0]))

        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")    
            talk(f"Sir, the time is {strTime}")

        elif 'open code' in query:
            codePath = ""
            os.startfile(codePath)

        elif 'email to ' in query:
            try:
                talk("What should I say?")
                content = rec_audio()
                to = ""    
                sendEmail(to, content)
                talk("Email has been sent!")
            except Exception as e:
                print(e)
                talk("Sorry my friend harry bhai. I am not able to send this email")



def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login('youremail@gmail.com', 'your-password')
    server.sendmail('youremail@gmail.com', to, content)
    server.close()


def response(text):
    print(text)
    
    tts =gTTs(text=text , lang="en")
    tts.save(audio)
    
    playsound.sound(audio)
    os.remove(audio)
    

def call(text):
    action_call = "assistant"
    
    text=text.lower()
    
    if action_call in text:
        return True
    
    return False



def today_date():
    now = datetime.datetime.now()
    date_now=datetime.datetime.today()
    week_now=calender.date_name[date.time.weekday()]
    month_now=now.month
    day_now=now.day
    
    months = [
        "January"
        "Febuary"
        "March"
        "April"
        "May"
        "June"
        "July"
        "August"
        "September"
        "Octuber"
        "November"
        "December"
    ]
    
    ordinals =[
        "1st"
        "2nd"
        "3rd"
        "4rth"
        "5th"
        "6th"
        "7th"
        "8th"
        "9th"
        "10th"
        "11th"
        "12th"
        "13th"
        "14th"
        "15th"
        "16th"
        "17th"
        "18th"
        "19th"
        "20th"
        "21th"
        "22th"
        "23rd"
        "24th"
        "25th"
        "26th"
        "27th"
        "28th"
        "29th"
        "30th"
        "31st"
    ]
    
    return f'Today is {week_now}, {months[month_now -1]}, the{ordinals[day_now -1]}.'

    
    


def say_hello(text):
    greet = ["hi","hello","greeting of the day","wassup",]
    
    response = ["hi","hello","hola",]
    
    for word in text.split():
        if word.lower in greet:
            return random.choice(response) + "."
    return ""





def wiki_person(text):
    list_wiki = text.split()
    for i in range (0, len(list_wiki)):
        if i + 3 <= len(list_wiki) -1 and list_wiki[i].lower() == "who" and list_wiki[i+1].lower == "is":
            return list_wiki[i+2] + "" + list_wiki[i+3]


while True:
    try:
        text = rec_Audio()
        speak = " "
        
        if call(text):
            speak = speak + say_hello(text)
            
            if "date" in text or "day" in text or "month" in text:
                get_today = today_date()
                speak = speak +  " " + today_date()
            
            elif "time" in text:
                now = datetime.datetime.now()
                meridiem = ""
                
                if  now.hour >= 12:
                    meridiem = "p.m"
                    hours = now.hour - 12
                
                else:
                    meridiem= "a.m"
                    hour = now.hour
                
                if  now.minute < 10:
                    minute = "0" + str(now.minute)
                else:
                    minute.str(now.minute)
                    speak = speak + " " +  "It is" + str(hour) + ":" + minute + "" + meridiem + "."
                    
                
            elif "wikipedia" in text or "Wikipedia" in text:
                if "Who is" in text:
                    person = wiki_person(text)
                    wiki = wikipedia.summary(person ,sentences=2)
                    speak = speak + " " + wiki
            
            elif "who are you" in text or "define yourself" in text:
                speak = speak + """Hello I am your AI and I am here to help you"""
                
            elif "who am I" in text:
                speak =  speak + "you are a human"
            
            elif "why do you exist" in text or "why did you come" in text:
                speak = speak + "It is a secret"
                
            elif "how are you" in text:
                speak = speak + "I am fine, Thank you"
                speak = speak + "\n How are you"
            
            elif "fine"  in text or "good" in text:
                speak = speak + "It's good to know that you are fine"
                
                response(speak)
            
    except: 
        talk("I don't know that")

